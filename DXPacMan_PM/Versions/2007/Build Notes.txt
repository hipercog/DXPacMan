08-10
Have fixed several bugs in state attribute calculation funcs, as discovered working on copies in ManipPacResults

16-09
Accelerated difficulty curve slightly, by incrementing gakProb and decrementing pacProb sooner, and increasing the multiplier on gstTik. Hopefully will be more challenging - not tested.

15-09
Altered MovePacman function, to stop him from eating PowerPills when he is already under the effects of another PowerPill.

11-09 :: OPEN DAY RESULTS
*************************

09-09
Added files impm.cpp & .h, to start the coding on information-based metrics in Pacman.

23-08
Added code to force quit when the first runClient call tries to connect to the server and fails. Prompts users to try, try again.

13-08
Fixed gameplay bug - when ghosts are eaten, their [ghostname]Eaten boolean prevents them colliding with Pacman.
Fixed gameplay bug - when Pacman is eaten, he reverts to base x,y - to prevent instant loss of many lives when ghost is also at this x,y, all ghosts also revert, just like in original game.

07-08 :: ONLINE RESULTS BEGIN
*****************************

24-07
Added code to smooth out the use of the teleporters - i.e. Pacman doesn't end up stuck in the teleporter square, he technically never enters it, just jumps straight to the square adjacent to the teleporter on the other side.
Added rendering of the score on the final screen, for the player's valediction. 

21-07
Added code to force the ghosts to stay on a dead reckoning course until they hit a wall or pass a junction - of three exits normally, of four when ghost is on a 2 square - i.e. within their own house.

19-07
Works with SimpleServer - see SimpleServer notes for today.

18-07
Have a reasonably stable build of a playable game. 
Analysis step commented out. Analysis file not created. 
Game States file created under directory corresponding to time of game start, at pathname specified in declaration of gameDir string in universals.cpp - time-based-directory and filename, but not pathname, passed to runClient function for remote logging.
Added cycles to state output.

16-07
Added levelling system, splash screen and new game over screen, for more game-like ness. Ghosts increase speed incrementally every 4 levels.

28-06
Moved all resource files to folder resources, altered code accordingly. Added some client side winsock code to project - wcomm.h & wcomm.cpp - which will be rewritten to connect to a simple server running on college servers to listen for and save to file completed game data.

24-04
Implemented more efficient tree search method, by calculating utilities for only the children of the current node, instead of all nodes at the depth below the current node.
Tested and debugged for probabilities, proper depth coordination etc.
Tree building down finishes sooner, so can set greater lookahead number in main.cpp (not an actual optimisation).

20-04
Tested probabilities - not much prediction accuracy improvement. Ready to implement different tree search method - not PreorderAtDepth...

12-04
Fixed analysis-side calculation of probabilities, so that each x,y position of each ghost in the combinatorical movement matrix has an associated value from the range [123567]. If we take a single tuple on the POT_GS index, we get NUM_GS x,y coords and a prob for each, so we can sum(?) these probs to get the final chance of that particular combination of ghost x,y's occuring. We hope...

11-04
Fixed Ghost movement driver for proximity-based prob calculation. Adding analysis-side estimation of probabilities.

13-03
Altered Ghost controller to distribute probabilities of ghost next-direction-for-movement between all adjacent open squares. Thus when Ghosts are attacking, the strongest probability will lie in the closest square to Pacman, and when they are running (Pac attack!) it will lie in the furthest square from Pacman. Other squares will get the remainder of the sum to 1. 
Probs are: 
0.7/0.3 	for 2 open adjacent squares
0.6/0.2/0.2 	for 3...
0.5/0.2/0.2/0.1	for 4...
With the smallest prob being the direction furthest from Pacman. 

11-03
Implemented a controller for Ghost movement - can set an int (GDMode) for control, which currently can be random movement or a slightly randomised proximity-triggered aggressive/defensive strategy (entered if within X manhattan distance of Pacman). The latter gets the heuristic dist. for all valid adjacent squares and, if GhostAttack, Ghost picks closest square with higher prob than furthest square (and vice versa if ¬GhostAttack). This makes Ghosts move toward Pacman when within range, with a seeming variation in aggressiveness.

10-03
Converted and tested code with adjustable number of ghosts. Predictions with two ghosts can go to tree of predictions depth of 3 now.

02-03
Began conversion of code to use a #define for the number of ghosts. Thus we can set two numbers (NUM_GS & POT_GS = 4^NUM_GS) to decide how many ghosts we use. Reached Probabilities section of dtpm.cpp, main.cpp after.

24-02
Build that PLayer Satisfaction workshop II paper was written around.
Tuned and debugged analysis functionality. Output is a csv with predictions, actual moves and 0 or 1 for miss or match. Seems fairly robust. Does 1 game at ply 1 in 2-ish hours. 2 ply is days. 3 ply?

20-02
Implemented writing states to a .csv file and reading them back. Then postDTPM() initialises PacState objects with data and perform analysis on them, writing out a direction prediction to fileout.

19-02
Debugged actions() function. Almost all results in order, though slow. Sometimes utilities are returned as 1.INF000000 or something similar - perhaps a division by zero? Hmm. 
BIG IDEA - record the games in real-time using PacState objects and run the d.d.D.T. analysis functions on the results, out of real-time.

18-02
Filled out actions() & calculateState() functions. Stack overflow instanteously. D'oh.S

16-02
Inserted PacState class into universals.h, and substituted it for all references to state info in DTPM.cpp functions. Tested - seems stable.
Filled out actions( int lookahead ); now it checks each direction away from current Pac pos, starting an action sequence to be evaluated in sumStates(); This may be superseded by plugging the sumStates into an A*-like function which can follow the data-space chreode; the challenge is knowing the target coordinate to pass into the A*.

12-02
Fixed bug in buildTreeOfGhostMoves() - iterator wasn't being updated, so tree was malformed. Now well-formed trees can be built up to ply 2, with run times from 10 to 30 seconds. Bad memory allocation exceptions occur sometimes at 2ply on a 2GB RAM machine, and 3 ply is out of the question. Print logging accounts for some of this, but on the order of tens of MB maximum - so tree contents requires the lion's share. 
Test tree code runs, on the same order of branching < 256, at between 1 and 6 seconds at 2 ply; also bad alloc's at 3 ply.
Simple optimisations can save some time and memory - smaller data types, no printing, optimise checks and allocations. Main optimisation will need to be algorithmic.

31-01
Altered a_Star to work on the shadow map of PacMap - dtpMap - intialised at every call to DTPM().
In order to call a_Star on a current version of the map, with none of the alterations made by other functions to the dtpMap, it's advised to re-init dtpMap from PacMap before calling a_Star - call initMap().

30-01
Version 1.5 of utility functions for Dots and Pills. 
utilityDots() - this returns, for each dot, 10 + 1/dot in proximity(1) + 0.33/dot in proximity(2) - 1/myHeuristicDist(xPac, yPac, xDot, yDot)
utilityPills() - This version contains much logging code, printouts and so on. The function calculates the closest pill to the midpoint between Pacman and the ghosts, and then calculates an array of ghosts in proximity-chain order. By each distance in the chain, it divides a value congruent to the points available for catching a ghost at that point in the chain.

22-01
Adding Utility calculation code. 
- Utility of Dots are equal to 1 + (#Dots @ radius of 1) + (0.25 * #Dots @ radius of 2)
- Utility of Pills is points value of pills, plus a function of the distance Pacman needs to travel to eat each ghost, multiplied by an increasing exponential factor.
- Utility of ghosts is going to be their 'hemming in' of Pacman, first.

11-01
Debugged Preorder tree recursion-based search of Ghost move possibility space. Conclusions:
 - Tree depth greater than 1 results in infinite execution, possibly due to oscillation.
 - Can 'fill in' working map after checking each ghost position, but results dont seem useful.
 - Need to cut down execution time for searching unrestricted map, but probably also fix bug in Preorder.
Switched to specifying Utility calculation...